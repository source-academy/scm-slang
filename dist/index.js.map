{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { encode as b64Encode, decode as b64Decode } from \"js-base64\";\n\n// Export CSE Machine functionality\nexport { parseSchemeSimple } from \"./CSE-machine/simple-parser\";\nexport { evaluate, Context } from \"./CSE-machine/interpreter\";\nexport { createProgramEnvironment } from \"./CSE-machine/environment\";\nexport { Value } from \"./CSE-machine/stash\";\nexport { SchemeComplexNumber } from \"./CSE-machine/complex\";\n\n// Export Conductor integration\nexport { SchemeEvaluator } from \"./conductor/runner/SchemeEvaluator\";\nexport { BasicEvaluator } from \"./conductor/runner/BasicEvaluator\";\nexport { initialise } from \"./conductor/runner/util/initialise\";\n\n// Export types\nexport * from \"./conductor/runner/types\";\nexport * from \"./conductor/types\";\nexport * from \"./conduit/types\";\nexport * from \"./common/errors\";\n\n// Export transpiler functionality (for compatibility)\nexport * from \"./utils/encoder-visitor\";\nexport { unparse } from \"./utils/reverse_parser\";\nexport { LexerError } from \"./transpiler\";\nexport { ParserError } from \"./transpiler\";\nexport { schemeParse } from \"./transpiler\";\n\nconst JS_KEYWORDS: string[] = [\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"eval\",\n  \"export\",\n  \"extends\",\n  \"false\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"return\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"true\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n  \"yield\",\n  \"enum\",\n  \"await\",\n  \"implements\",\n  \"package\",\n  \"protected\",\n  \"static\",\n  \"interface\",\n  \"private\",\n  \"public\",\n];\n\n/**\n * Takes a Scheme identifier and encodes it to follow JS naming conventions.\n *\n * @param identifier An identifier name.\n * @returns An encoded identifier that follows JS naming conventions.\n */\nexport function encode(identifier: string): string {\n  if (JS_KEYWORDS.includes(identifier) || identifier.startsWith(\"$scheme_\")) {\n    return (\n      \"$scheme_\" +\n      b64Encode(identifier).replace(\n        /([^a-zA-Z0-9_])/g,\n        (match: string) => `\\$${match.charCodeAt(0)}\\$`\n      )\n    );\n  } else {\n    return identifier.replace(\n      /([^a-zA-Z0-9_])/g,\n      (match: string) => `\\$${match.charCodeAt(0)}\\$`\n    );\n  }\n}\n\n/**\n * Takes a JS identifier and decodes it to follow Scheme naming conventions.\n *\n * @param identifier An encoded identifier name.\n * @returns A decoded identifier that follows Scheme naming conventions.\n */\nexport function decode(identifier: string): string {\n  if (identifier.startsWith(\"$scheme_\")) {\n    return b64Decode(\n      identifier\n        .slice(8)\n        .replace(/\\$([0-9]+)\\$/g, (_, code: string) =>\n          String.fromCharCode(parseInt(code))\n        )\n    );\n  } else {\n    return identifier.replace(/\\$([0-9]+)\\$/g, (_, code: string) =>\n      String.fromCharCode(parseInt(code))\n    );\n  }\n}\n\n// Initialize conductor (following py-slang pattern)\n// Note: This will be executed when the module is loaded\n// const {runnerPlugin, conduit} = initialise(SchemeEvaluator);\n"],"names":[],"mappings":"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"}